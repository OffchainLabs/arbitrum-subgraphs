type OutboxEntry @entity {
  "batchNum hexstring which is the unique identifier and primary key of the entity"
  id: ID!
  outboxEntryIndex: BigInt! # uint256
  outputRoot: Bytes! # bytes32
  numInBatch: BigInt! # uint256
  spentOutput: [OutboxOutput!] @derivedFrom(field: "outboxEntry")
}

type OutboxOutput @entity {
  "this ID is not the same as the outputId used on chain"
  id: ID!
  destAddr: Bytes! # address
  l2Sender: Bytes! # address
  path: BigInt! # uint256
  outboxEntry: OutboxEntry!
  "if OutboxOutput exists, it means it has been spent"
  spent: Boolean!
}

enum MessageKind {
  Retryable
  NotSupported
  EthDeposit
}

type RawMessage @entity {
  "the inbox sequence number of the current message"
  id: ID!
  "Nitro message type"
  kind: MessageKind!
  "message sender"
  sender: Bytes! # address
}

type ClassicRawMessage @entity {
  "the inbox sequence number of the current message"
  id: ID!
  "classic message type"
  kind: MessageKind!
  "message sender"
  sender: Bytes! # address
}

type Retryable @entity(immutable: true) {
  "the inbox sequence number of the current message"
  id: ID!
  "account that created retryable ticket, original address"
  sender: Bytes! # address
  "is the current retryable a deposit of eth"
  isEthDeposit: Boolean!
  "value sent with message"
  value: BigInt!
  "indicates the L2 address destination"
  destAddr: Bytes! # bytes32
  "ticket id of retryable"
  retryableTicketID: Bytes! # bytes32
  "calldata used in L2 call"
  l2Calldata: Bytes!
  "L2 call value"
  l2Callvalue: BigInt!
  "L1 block timestamp"
  timestamp: BigInt!
  "L1 tx retryable is created at"
  transactionHash: Bytes!
  "L1 block retryable is created at"
  blockCreatedAt: BigInt!
}

type ClassicRetryable @entity(immutable: true) {
  "the inbox sequence number of the current message"
  id: ID!
  "account that created retryable ticket, original address"
  sender: Bytes! # address
  "is the current retryable a deposit of eth"
  isEthDeposit: Boolean!
  "value sent with message"
  value: BigInt!
  "indicates the L2 address destination"
  destAddr: Bytes! # bytes32
  "ticket id of retryable"
  retryableTicketID: Bytes! # bytes32
  "calldata used in L2 call"
  l2Calldata: Bytes!
  "L2 call value"
  l2Callvalue: BigInt!
  "L1 block timestamp"
  timestamp: BigInt!
  "L1 tx retryable is created at"
  transactionHash: Bytes!
  "L1 block retryable is created at"
  blockCreatedAt: BigInt!
}

enum DepositType {
  EthDeposit
  TokenDeposit
}

type Deposit @entity(immutable: true) {
  "txHash-txIndex"
  id: ID!
  "EthDeposit or TokenDeposit"
  type: DepositType!
  "account that deposited funds on L1, original address"
  sender: Bytes! # address
  "receiver L2 account"
  receiver: Bytes! # address
  "Eth value being deposited in wei"
  ethValue: BigInt! # uint256
  "token being deposited"
  l1Token: Token
  "unique id for retryable transaction"
  sequenceNumber: BigInt # uint256
  "retryable's calculated ID on L2"
  l2TicketId: String
  "token amount being deposited on L1"
  tokenAmount: BigInt # uint256
  "true -> classic; false -> nitro"
  isClassic: Boolean!
  "L1 block timestamp"
  timestamp: BigInt!
  "L1 deposit tx"
  transactionHash: String!
  "L1 block in which deposit is made"
  blockCreatedAt: BigInt!
  "max submission cost"
  maxSubmissionCost: BigInt # uint256
}

type Gateway @entity {
  "gateway address"
  id: ID!
  "L1 block number in which this gateway was first registered in router"
  registeredAtBlock: BigInt!
  "tokens this gateway supports"
  tokens: [Token!] @derivedFrom(field: "gateway")
}

type Token @entity {
  "L1 token address"
  id: ID!
  "token name"
  name: String
  "token symbol"
  symbol: String
  "number of decimals"
  decimals: Int
  "gateway that supports this token"
  gateway: Gateway
  "L1 block number in which this token was first registered in router/gateway"
  registeredAtBlock: BigInt!
}

enum NodeStatus {
  Pending
  Confirmed
  Rejected
}

type Node @entity {
  "node number in hex"
  id: ID!

  "hash of information contained in this node"
  nodeHash: Bytes!

  "hash of parent node"
  parentHash: Bytes!

  "block the node was created"
  blockCreatedAt: BigInt!

  "count of sequencer inbox when assertion is created"
  inboxMaxCount: BigInt!

  "Total number of AVM sends emitted from the beginning of time after this node is confirmed"
  afterSendCount: BigInt!

  "timestamp the node was created"
  timestampCreated: BigInt!

  "A node is created as pending, this is the timestamp in which it was either confirmed or rejected"
  timestampStatusUpdate: BigInt

  "confirmation status of node in the rollup"
  status: NodeStatus!
}

type DefaultGatewayUpdated @entity {
  id: ID!
  newDefaultGateway: Bytes! # address
  timestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type GatewaySet @entity {
  id: ID!
  l1Token: Bytes! # address
  gateway: Bytes! # address
  timestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type TransferRouted @entity {
  id: ID!
  token: Bytes! # address
  _userFrom: Bytes! # address
  _userTo: Bytes! # address
  gateway: Bytes! # address
  timestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type TxToL2 @entity {
  id: ID!
  _from: Bytes! # address
  _to: Bytes! # address
  _seqNum: BigInt! # uint256
  _data: Bytes! # bytes
}

type WhitelistSourceUpdated @entity {
  id: ID!
  newSource: Bytes! # address
  timestamp: BigInt!
  transactionHash: Bytes!
  blockNumber: BigInt!
}

type Inbox @entity {
  id: ID!
}
